npm init
package.json

server.js
mkdir api, api/controller, api/routes

npm install express --save
npm install --save-dev nodemon
npm install cors --save

npm install --save-dev babel-cli babel-preset-es2015-mod babel-preset-env
npm install --save-dev babel-preset-es3 babel-plugin-transform-runtime


start:
======
npm run start



Docker:
======
sudo docker build -t users-node:v1 .
sudo docker tag users-node:v1 ubt-master:443/users-node:v1
sudo docker push ubt-master:443/users-node:v1

K8s:
====
cd  ./config
//kubectl create -f users-node.yaml
export DNAME="ubt-master" && envsubst < users-node.yaml | kubectl create -f -
kubectl create -f user-node-service.yaml

kubectl get pods
kubectl get deployments
kubectl get service


Spinoff:
=======
kubectl delete service users-node-service
kubectl delete deployment users-node

sudo docker rmi pod-name-id



##################################################################################
=================== Deployment to k8s ==================
1. no longer used
#npm install pm2 -save

2.
create Dockerfile
create process.yml
create service and deployment yamls: help-k8s.yaml

3.
Delete existing, if necessary:
=======
kubectl delete service help-node-service
kubectl delete deployment help-node

sudo docker rmi help-node:v1
sudo docker rmi ubt-master:443/help-node:v1

4. Checkout code from git/hub into dir on server:
cd ~/repo/msrv
git pull origin master
cd services/nress/help

5. build production:
sudo npm install

remove build dir content: cd build
sudo rm -Rf ./*

sudo npm run build

To test start:
node ./build/index.js
curl localhost:3336/help/users


6.
Docker:
======
sudo docker build -t help-node:v1 .
sudo docker tag help-node:v1 ubt-master:443/help-node:v1
sudo docker push ubt-master:443/help-node:v1

docker run -i -t -p 3336:3336 --network=host ubt-master:443/help-node:v1 /bin/bash

K8s:
====

/* --------------- Use Helm instead ----------------------
cd  ./deploy

// Add $DNAME to users-node.yaml image: prop
export DNAME="ubt-master" && envsubst < users-k8s.yaml | kubectl create -f -
 ------------------------------------------------------- */

!!!!!!!!!!!!!!!!!!! Helm deploy !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

## Go to Helm client (linux or win).

helm init --client-only

// make sure docker pard was done before and image is in the registry
helm install ./help-node --name=help-node

Verify:
=======
kubectl get pods
kubectl get deployments
kubectl get service



Firewall:
========
Regular cmd (not admin)
.\VBoxManage.exe natnetwork modify --netname NatNetwork --port-forward-4 "help-node:tcp:[]:30336:[10.0.2.5]:30336"

Test in browser:
http://192.168.56.1:30336/help/users

####################################################################################






Prod build:
===========

mkdir ./build
del -r build/*

npm install --save-dev babel-preset-es3 babel-preset-es2015-mod babel-plugin-transform-runtime
npm install --save-dev babel-preset-es2015-mod
#npm install --save-dev babel-plugin-transform-runtime
#npm install babel-plugin-uglify --save-dev
#npm uninstall babel-plugin-uglify --save-dev
npm install babel-minify --save-dev
npm install babel-plugin-transform-minify-booleans --save-dev

Add to .bablerc:
================
"ignore": ["**/*.test.js", "node_modules"]

Add to package.json:
====================
//"prebuild": "rm -rf build/*",
//"prebuild": "del /r /f /q build"  // cmd
"prebuild": "del -R -Force -Path build && mkdir build",  // powershell

//"build": "babel . -d ./build -s && mkdir \"build/config\" && copy \"config/.\" \"build/config\"",
"build": "babel --minified=true --presets=es2015 . -d ./build -s",

"prestart": "npm build",
//"start-prod": "NODE_ENV=production node ./build/index.js" - not working


npm run build

sudo cp -a ./config/. ./build/config/.

start:
node ./build/index.js

pm2 start:
=========
pm2 start ./build/index.js
pm2 list
pm2 stop ./build/index.js
pm2 delete $id
pm2 kill


Spinoff:
=======
kubectl delete service users-node-service
kubectl delete deployment users-node

sudo docker rmi users-node:v1
sudo docker rmi ubt-master:443/users-node:v1


******************************************* Google cloud build ************************

gcloud auth configure-docker

docker build -t help-node:v1 .
docker tag help-node:v1 gcr.io/gcpro1-10001110001/help-node:v1
docker push gcr.io/gcpro1-10001110001/help-node:v1

kubectl create -f help-k8s_gc.yaml


***************************************************************************************
google cloud:
https://cloud.google.com/kubernetes-engine/docs/quickstart

C:\Google\CloudSDK>gcloud container clusters list
NAME       LOCATION       MASTER_VERSION  MASTER_IP       MACHINE_TYPE   NODE_VERSION  NUM_NODES  STATUS
cluster-1  us-central1-a  1.8.10-gke.0    104.197.251.95  n1-standard-1  1.8.10-gke.0  3          RUNNING

gcloud container clusters get-credentials cluster-1

to config kubectl and access cluster:
gcloud container clusters get-credentials cluster-1 --zone=us-central1-a


kubectl run hello-server --image gcr.io/google-samples/hello-app:1.0 --port 8080
kubectl expose deployment hello-server --type "LoadBalancer"

========================= Yaml =====================================================

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: 2018-05-22T20:29:45Z
  labels:
    name: help-node-service
    run: help-node
  name: help-node-service
  namespace: default
  resourceVersion: "27625"
  selfLink: /api/v1/namespaces/default/services/help-node-service
  uid: dd70b276-5dfe-11e8-ab8a-42010a800053
spec:
  clusterIP: 10.11.246.198
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30336
    port: 3336
    protocol: TCP
    targetPort: 3336
  selector:
    run: help-node
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 35.192.104.101


============================ Aws ================================

sudo apt-get update
sudo apt install awscli
$(aws ecr get-login --no-include-email --region us-east-2)

Docker:
======
sudo docker build -t help-node:v8 .
sudo docker tag help-node:v8 303632807918.dkr.ecr.us-east-2.amazonaws.com/repo/help-node:v8
sudo docker push 303632807918.dkr.ecr.us-east-2.amazonaws.com/repo/help-node:v8



MongoDB:
=======
1. install
2. mkdir c:\mongo\data
3. "C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe" --dbpath c:\mongo\data
4. start: "C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe"
5. Commands:
db - current db
show dbs
use nress_db - switch to db


/// #################################################################################################################
///                                      Mongoose on case sentivity
/// #################################################################################################################
/// Let’s assume the model is ‘Campaign’.
/// mongodb collection name is case sensitive (‘Campaigns’ is different from ‘campaigns’)
/// mongodb best practises is to have all lower case for collection name (‘campaigns’ is preferred)
/// mongoose model name should be singular and upper case (‘Campaign’)
/// mongoose will lowercase and pluralize with an ‘s’ so that it can access the collection (‘Campaign’ » ‘campaigns’)
/// #################################################################################################################


show collections
db.getCollectionNames()
db.createCollection("help")

db.demohelpitems.insertOne( { dh_type: "CALENDAR", dh_text: "Calendar events are drag-and-drop and resizable (c)" } );
db.demohelpitems.insertOne( { dh_type: "CALENDAR", dh_text: "To move event to different date, rest the mouse pointer on the event until it becomes a hand pointer, and then drag and drop it to different location" } );
db.demohelpitems.insertOne( { dh_type: "CALENDAR", dh_text: "To resize event, rest the mouse pointer on the event's left or right boundry until it becomes a resize pointer, and then drag the boundary" } );
db.demohelpitems.insertOne( { dh_type: "CALENDAR", dh_text: "Calendat events data is for demonstration puropses only, and not stored in the database" } );
db.demohelpitems.insertOne( { dh_type: "CALENDAR", dh_text: "Hide these Tips by clicking Get Help button again" } );

db.demohelpitems.insertOne( { dh_type: "SOLICITATIONS", dh_text: "Search by Soliciation Title (c)" } );
db.demohelpitems.insertOne( { dh_type: "SOLICITATIONS", dh_text: "Fully functional CRUD operations: Add, Update and Delete Solicitation" } );
db.demohelpitems.insertOne( { dh_type: "SOLICITATIONS", dh_text: "Live data from MongoDB Solicitations collection" } );
db.demohelpitems.insertOne( { dh_type: "SOLICITATIONS", dh_text: "Hide these Tips by clicking Get Help button again" } );

db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "Search by Username (c)" } );
db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "Additional User Details by clicking icon" } );
db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "Multisort by clicking Column Header while holding down Shift key" } );
db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "To resize column, rest the mouse pointer on the header boundary until it becomes a resize pointer, and then drag the boundary" } );
db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "Live data from MongoDB" } );
db.demohelpitems.insertOne( { dh_type: "USERS", dh_text: "Hide these Tips by clicking Get Help button again" } );

db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Search by all columns data (c)" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Reorder rows by dragging first icon of each row" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Quick preview by mouse-over the 'eye' icon" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Export table to CSV format for Excel by clicking 'Excel'" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Select row by clicking on it. Right-click for context menu" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "In-place editing for Response Status, First and Last name column data" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "To rearrange columns, drag by the column header" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "To resize column, rest the mouse pointer on the header boundary until it becomes a resize pointer, and then drag the boundary" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Live data from Oracle Beta Review Proposals table" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Edit/Delete operations do not propagate to the underlying database, since it is a live Beta data" } );
db.demohelpitems.insertOne( { dh_type: "REVIEWS", dh_text: "Hide these Tips by clicking Get Help button again" } );


db.demohelpitems.find().pretty()

show help
show databases

db.collection.remove()
db.collection.drop()

