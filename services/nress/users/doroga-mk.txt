docker:
=======
###########################################################################################################################################################

$ docker network ls
$ docker run --network=<NETWORK>
$ docker network inspect bridge

$ docker network create -d bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 dockernet
$ docker network rm dockernet

$ docker network create -d bridge --subnet 172.17.0.0/24 --gateway 172.17.0.1 dockernet

$ docker attach container1

docker info

You can share a drive “on demand” the first time a particular mount is requested:

docker --rm -v c:/Users:/data ls /data run hello-world
docker run hello-world

docker run  -it ubuntu bash | exit

docker run -d -p 80:80 --name webserver nginx
192.168.99.100
docker ps
docker stop webserver
docker start webserver
docker rmi nginx

~~~~~~~~~~~~~~~~~~~~~~

Windows Power Shell run as admin
Set-ExecutionPolicy RemoteSigned
Install-Module posh-docker
Import-Module posh-docker

if (-Not (Test-Path $PROFILE)) {
    New-Item $PROFILE –Type File –Force
}

Add-Content $PROFILE "`nImport-Module posh-docker"

This creates a $PROFILE if one does not already exist, and adds this line into the file:
Import-Module posh-docker
To check that the file was properly created, or simply edit it manually, type this in PowerShell:
Notepad $PROFILE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



docker run --rm -v c:/Users:/data ls /data -i -t -p 3333:3333 --network="host" users-node:v1 /bin/bash

===============
Local Registry:
===============

docker run -d -p 5000:5000 --restart=always --name registry registry:2

docker pull ubuntu:16.04
docker tag ubuntu:16.04 localhost:5000/my-ubuntu

Push the image to the local registry running at localhost:5000:
docker push localhost:5000/my-ubuntu

Remove the locally-cached ubuntu:16.04 and localhost:5000/my-ubuntu images, so that you can test pulling the image from your registry. This does not remove the localhost:5000/my-ubuntu image from your registry.

docker image remove ubuntu:16.04
docker image remove localhost:5000/my-ubuntu

Pull the localhost:5000/my-ubuntu image from your local registry.

======================
Stop a local registry:
======================

docker stop registry

To remove the container, use docker rm
docker stop registry && docker rm -v registry
docker rmi -f registry
docker rmi -f registry:2



###########################################################################################################################################################

-create server.js
-create Dockerfile
docker build -t n1-node:v1 .




docker images
docker ps
192.168.99.100

docker build -t hello-node:v1 .

docker run -i -t -p 8080:8080 hello-node:v1 /bin/bash

2. another node
docker build -t bcx-node:v1 .
docker run -i -t -p 5555:5555 bcx-node:v1 /bin/bash


docker registry in docker:
=========================

docker run -d -p 5000:5000 --name registry registry:2
docker pull ubuntu
docker tag ubuntu localhost:5000/myfirstimage
docker push localhost:5000/myfirstimage
docker pull localhost:5000/myfirstimage
docker stop registry && docker rm -v registry


docker tag ubuntu localhost:5000/n1-node:v1
docker push localhost:5000/n1-node:v1
docker pull localhost:5000/n1-node:v1


minikube:
========

start minikube:
==============
minikube status

minikube stop
minikube start --vm-driver="virtualbox"

minikube start --vm-driver="virtualbox" --insecure-registry="0.0.0.0:5000"
kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.100

create deployment:

kubectl delete deployment n1-node
kubectl run n1-node --image=n1-node:v1 --port=8080




kubectl get pod
kubectl get deployments

create service:

-expose
kubectl expose deployment n1-node --type=LoadBalancer
kubectl get services

-start service:
minikube service n1-node

http://192.168.99.101:31528/


CLUSTER IP:
===========
kubectl run n1-5-node --replicas=5 --labels="run=load-balancer-example" --image=n1-node:v1  --port=8080
-kubectl get deployments n1-5-node
-kubectl describe deployments n1-5-node
-kubectl get replicasets
-kubectl describe replicasets

//kubectl expose deployment n1-5-node --type=LoadBalancer --name=n1-5-service    not working on single minikube
kubectl expose deployment n1-5-node --type=NodePort --name=n1-5-service
-kubectl get services n1-5-service
-kubectl describe services n1-5-service

minikube service n1-5-service

kubectl delete services n1-5-service
kubectl delete deployment n1-5-node


==============================================================================================================================

Docker image users.js:
======================
1. docker quickstart shortcut
2. cd c:/angular/msrv/services/nress/users
3. docker build -t users-node:v1 .
4. docker images
docker ps

5. Test: 
# docker run -i -t -p 3333:3333 users-node:v1 /bin/bash
docker run -i -t -p 3333:3333 --network=host users-node:v1 /bin/bash

remove image
docker rmi -f users-node:v1


$ ip addr show eth0


dockerfile from:
===============
FROM node:8.9.1
EXPOSE 3333
COPY ./ .
CMD node users.js

to:
===


RUN npm install -g nodemon
COPY ./script.js /root/script.js
CMD ["nodemon", "-w", "./users.js", "./users.js"]


Move to registry (drop/re-create registry first):
================================================

#docker run -v $(pwd)/data:/tmp/registry-dev --name docker-registry registry:2.0

#docker run -p 443:443 -e REGISTRY_HOST="docker-registry" -e REGISTRY_PORT="5000" -e SERVER_NAME="localhost" --link docker-registry:docker-registry 


docker stop registry && docker rm -v registry
docker run -d -p 5000:5000 --name registry registry:2

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
~~~~~~~~~~~~~~~~~~~~~
Build from Dokerfile:
~~~~~~~~~~~~~~~~~~~~~
1. Build:
$ docker build -t users-node:v1 .
$ docker images

2. Test:
$ do
# nodemon -w ./users.js ./users.js
http://192.168.99.100:3333/nress/users

2. Create Registry, if not present (delete old ones):

docker stop registry && docker rm -v registry
docker rmi -f registry
docker rmi -f registry:2

// $ docker run -d -p 5000:5000 --restart=always --name registry registry:2 - https
// $ docker run -d -p 5000:5000 --restart=always --name registry registry
$ docker run -d -p 5000:5000 --network=host --restart=always --name registry registry:2

3. Put to local registry for Kubernetes:
// $ docker tag users-node:v1 localhost:5000/users-node
// $ docker push localhost:5000/users-node
$ docker tag users-node:v1 192.168.99.100:5000/users-node
$ docker push 192.168.99.100:5000/users-node

-Remove old images:
$ docker image remove users-node:v1
or
$ docker rmi -f users-node:v1

$ docker image remove localhost:5000/users-node

-Test pull now from local registry:
// $ docker pull localhost:5000/users-node
$ docker pull 192.168.99.100:5000/users-node

- Test again:
$ docker run -i -t -p 3333:3333 --network=host localhost:5000/users-node /bin/bash
# nodemon -w ./users.js ./users.js
http://192.168.99.100:3333/nress/users

Fin.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To kubernetes: (start power shell with admin priv)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Exit Docker, if present (shortcut kill). Minikube will start its own.

2. Start minikube (192.168.99.106)
minikube delete

minikube start --insecure-registry "10.0.0.0/24"
#minikube start --vm-driver="virtualbox" - no
#minikube start --vm-driver="virtualbox" --insecure-registry="localhost:5000" - no

minikube start --vm-driver="virtualbox" --insecure-registry="0.0.0.0:5000"
#minikube start --vm-driver="virtualbox" --insecure-registry="192.168.99.100:5000"  - connection refused

~/.minikube/machines/minikube/config.json

minikube status
#kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.103
#kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.101

kubectl get pod
kubectl get deployments
kubectl delete deployment users-node

#kubectl create secret docker-registry my-secret --docker-server=127.0.0.1:5000
# kubectl create secret docker-registry my-secret --docker-server=127.0.0.1:5000 --docker-username=uname --docker-password=****** --docker-email=email@sample.com

kubectl run users-node --image=localhost:5000/users-node --port=3333
kubectl get pod

kubectl run users-node --replicas=5 --labels="users-node minikube service" --image=localhost:5000/users-node --port=3333

2. kubectl expose deployment users-node --type=NodePort --name=users-service
kubectl delete services/users-service
kubectl delete deployment users-node

3. minikube service users-service

-----------------------------------------------------------------------------------------------------------------------------------------------------------
For Mongo ip access:

ipconfig /all
Ethernet adapter VirtualBox Host-Only Network: IPv4 Address

kubectl get po --all-namespaces
//if no dns module, do these:

minikube stop
PS C:\Program Files\Oracle\VirtualBox> 
.\VBoxManage.exe modifyvm "minikube" --natdnsproxy1 on
.\VBoxManage.exe modifyvm "minikube" --natdnshostresolver1 on

minikube start


minikube start --vm-driver="virtualbox"
minikube docker-env
minikube docker-env | Invoke-Expression
docker images
...

docker build -t users-node:v1 .
kubectl run users-node --replicas=5 --image=users-node:v1 --port=3333
kubectl get pod
kubectl expose deployment users-node --type=NodePort --name=users-service
kubectl get service

users-service   NodePort    10.103.136.109   <none>        3333:31367/TCP   12s

http://192.168.99.103:31367/nress/users

